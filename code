#include<bits/stdc++.h>
using namespace std;
bool matCheck(int arr[9][9],int num,int x,int y)
{
    int mulX = x/3;
    int mulY = y/3;
    int startX = 3*mulX;
    int startY = 3*mulY;
    for(int i=startX;i<startX+3;i++)
    {
        for(int j= startY;j<startY+3;j++)
        {
            if(arr[i][j] == num)
            {
                return false;
            }
        }
    }
    return true;
}
bool rowCheck(int arr[9][9],int num,int x,int y)
{
    for(int i=y+1;i<9;i++)
    {
        if(arr[x][i] == num)
        {
            return false;
        }
    }
    for(int i=0;i<y;i++)
    {
        if(arr[x][i] == num)
        {
            return false;
        }
    }
    return true;
}
bool columnCheck(int arr[9][9],int num,int x,int y)
{
    for(int i=x+1;i<9;i++)
    {
        if(arr[i][y] == num)
        {
            return false;
        }
    }
    for(int i=0;i<x;i++)
    {
        if(arr[i][y] == num)
        {
            return false;
        }
    }
    return true;
}
bool check(int arr[9][9],int num,int x,int y)
{
    if(columnCheck(arr,num,x,y) && rowCheck(arr,num,x,y) && matCheck(arr,num,x,y))
    {
        return true;
    }
    return false;
}
pair<int,int> findEmpty(int arr[9][9])
{
    for(int i=0;i<9;i++)
    {
        for(int j=0;j<9;j++)
        {
            if(arr[i][j] == 0)
            {
                return make_pair(i,j);
            }
        }
    }
    return make_pair(-1,-1);
}
bool sudokuSolver(int arr[9][9])
{
    pair<int,int> ep = findEmpty(arr);
    if(ep.first == -1)
    {
        return true;
    }
    for(int i=1;i<=9;i++)
    {
        if(check(arr,i,ep.first,ep.second))
        {
            arr[ep.first][ep.second]= i;
            bool r = sudokuSolver(arr);
            if(r==false)
            {
                arr[ep.first][ep.second] = 0;
            }
            else
            {
                return true;
            }
            
        }
    }
    return false;
}

int main(){

  int n = 9; 
  int board[9][9];
  for(int i = 0; i < n ;i++){
	for(int j = 0; j < n; j++){
        	cin >> board[i][j];
        }		
  }
  if(sudokuSolver(board)){
	cout << "true";	
  }else{
	cout << "false";	
  }
}
